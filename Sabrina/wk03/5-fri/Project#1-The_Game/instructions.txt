Overview

Let's start out with something fun - a game!

Everyone will get a chance to be creative, and work through some really tough programming challenges – Let's start out with something fun - a game! We'll be making tic tac toe (knots and crosses). What a nice surprise! But it's up to you to come up with a fun and interesting approach to this classic game.

You will be working individually for this project, but we'll be guiding you along the process and helping you as you go. Show us what you've got!

Technical Requirements

Your app must:

Render a game in the browser
Switch turns between more than one player
Design logic for winning & visually display which player won
Include separate HTML / CSS / JavaScript files
Stick with KISS (Keep It Simple Stupid) and DRY (Don't Repeat Yourself) principles
Use Javascript for DOM manipulation
Deploy your game online, where the rest of the world can access it
Use semantic markup for HTML and CSS (adhere to best practices)
Necessary Deliverables

A working game, built by you, hosted somewhere on the internet
A link to your hosted working game in the URL section of your GitHub repo
A git repository hosted on GitHub, with a link to your hosted game, and frequent commits dating back to the very beginning of the project
A readme.md file with explanations of the technologies used, the approach taken, installation instructions, unsolved problems, etc.
Bonus extensions

These are for extra credit! DON'T focus on these until you've hit the core requirements.

Keep track of multiple game rounds with a win counter
Allow game customizable options, time limits, board size, game rounds, name & profiles etc
Allow players to customize their token (X, O, name, picture, avatar etc)
Use timers to display "waiting..." messages while users are waiting to be matched
Get inventive with your styling ** research CSS effects, animations or HTML canvas API to spiff things up
Research LocalStorage or SessionStorage to persist data locally to allow games to continue after page refresh or loss of internet connectivity
Be creative! Bend the rules and give it a twist!
Suggested Ways to Get Started

Break the project down into different components (data, presentation, views, style, DOM manipulation) and brainstorm each component individually. Use whiteboards!
Use your Development Tools (console.log, inspector, debugger, etc) to debug and solve problems
Work through the lessons in class & ask questions when you need to! Think about adding relevant code to your game each night, instead of, you know... procrastinating.
Commit early, commit often. Don’t be afraid to break something because you can always go back in time to a previous version.
Consult documentation resources (MDN, jQuery, etc.) at home to better understand what you’ll be getting into.
Don’t be afraid to write code that you know you will have to remove later. Create temporary elements (buttons, links, etc) that trigger events if real data is not available. For example, if you’re trying to figure out how to change some text when the game is over but you haven’t solved the win/lose game logic, you can create a button to simulate that until then.
Useful Resources

MDN Javascript Docs (a great reference for all things Vanilla Javascript)
jQuery Docs (if you're using jQuery)
GitHub Pages (for hosting your game)
lol commits
Project Feedback + Evaluation

Project Workflow: Did you complete the user stories, wireframes, task tracking, and/or ERDs, as specified above? Did you use source control as expected for the phase of the program you’re in (detailed above)?

Technical Requirements: Did you deliver a project that met all the technical requirements? Given what the class has covered so far, did you build something that was reasonably complex?

Creativity: Did you add a personal spin or creative element into your project submission? Did you deliver something of value to the end user (not just a login button and an index page)?

Code Quality: Did you follow code style guidance and best practices covered in class, such as spacing, modularity, and semantic naming? Did you comment your code as your instructors have in class?

Deployment: Did you deploy your application to a public url using GitHub Pages?

Score	Expectations
0	Incomplete.
1	Does not meet expectations.
2	Meets expectations, good job!
3	Exceeds expectations, you wonderful creature, you!
This will serve as a helpful overall gauge of whether you met the project goals, but the more important scores are the individual ones above, which can help you identify where to focus your efforts for the next project!
